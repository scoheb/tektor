name: Validate Tekton Resources

on:
  pull_request:
    paths:
      - '**/*.yaml'
      - '**/*.yml'
      - 'testdata/**'
  push:
    branches: [main]
    paths:
      - '**/*.yaml'
      - '**/*.yml'
      - 'testdata/**'

jobs:
  validate-tekton:
    runs-on: ubuntu-latest
    name: Validate Tekton Resources
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for changed file detection
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate Tekton Resources
        id: validate
        uses: ./  # Use this action (for testing the action itself)
        with:
          file-patterns: 'testdata/**/*.yaml,example-*.yaml'
          exclude-patterns: 'testdata/README.md'
          verbose: true
          fail-on-error: true
          tektor-args: '--param taskGitRevision=${{ github.event.pull_request.head.ref || github.ref_name }}'
          parameters: |
            gitUrl=https://github.com/${{ github.repository }}.git
            gitRevision=${{ github.head_ref || github.ref_name }}
            pr-url=${{ github.event.pull_request.html_url }}
            pr-branch=${{ github.event.pull_request.head.ref }}
            pr-base-branch=${{ github.event.pull_request.base.ref }}

      - name: Display Results
        if: always()
        run: |
          echo "## Validation Results"
          echo "- **Validated files:** ${{ steps.validate.outputs.validated-files }}"
          echo "- **Error count:** ${{ steps.validate.outputs.error-count }}"
          echo "- **Warning count:** ${{ steps.validate.outputs.warning-count }}"
          echo "- **Results:** ${{ steps.validate.outputs.validation-results }}"

      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('🔍 Tektor Validation')
            );
            
            const validationResults = `${{ steps.validate.outputs.validation-results }}`;
            const errorCount = `${{ steps.validate.outputs.error-count }}`;
            const warningCount = `${{ steps.validate.outputs.warning-count }}`;
            const validatedFiles = `${{ steps.validate.outputs.validated-files }}`;
            
            const status = errorCount === '0' ? '✅ Passed' : '❌ Failed';
            const fileCount = validatedFiles ? validatedFiles.split(',').filter(f => f.trim()).length : 0;
            
            const body = `## 🔍 Tektor Validation Results
            
            **Status:** ${status}  
            **Files validated:** ${fileCount}  
            **Errors:** ${errorCount}  
            **Warnings:** ${warningCount}
            
            ${validatedFiles && fileCount > 0 ? `
            ### Validated Files:
            ${validatedFiles.split(',').map(f => f.trim()).filter(f => f).map(f => `- \`${f}\``).join('\n')}
            ` : ''}
            
            **Details:** ${validationResults}
            
            ---
            *Validation performed by [Tektor](https://github.com/lcarva/tektor)*
            `;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            } 
